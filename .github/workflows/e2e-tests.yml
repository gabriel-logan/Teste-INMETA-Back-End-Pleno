name: E2E Tests

on:
  pull_request:
    branches: ["main"]
    paths:
      - "src/**"
      - "test/**"
      - ".github/workflows/e2e-tests.yml"
      - "yarn.lock"
      - "tsconfig.json"
      - "nest-cli.json"

  push:
    branches: ["main"]
    paths:
      - "src/**"
      - "test/**"
      - ".github/workflows/e2e-tests.yml"
      - "yarn.lock"
      - "tsconfig.json"
      - "nest-cli.json"

  workflow_dispatch:

jobs:
  e2e:
    runs-on: ubuntu-latest

    env:
      NODE_ENV: ${{ secrets.NODE_ENV }}
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      BASE_URL: ${{ secrets.BASE_URL }}
      SERVER_PORT: ${{ secrets.SERVER_PORT }}
      JWT_TOKEN_SECRET: ${{ secrets.JWT_TOKEN_SECRET }}
      JWT_TOKEN_EXPIRATION: ${{ secrets.JWT_TOKEN_EXPIRATION }}
      TEST_ADMIN_USERNAME: ${{ secrets.TEST_ADMIN_USERNAME }}
      TEST_ADMIN_PASSWORD: ${{ secrets.TEST_ADMIN_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "yarn"

      - name: Install dependencies
        run: yarn install

      - name: Start MongoDB with replica set
        run: |
          docker run -d \
            --name mongo-rs \
            -p 27017:27017 \
            mongo:6.0 --replSet rs0

          echo "Waiting for MongoDB to start..."
          sleep 5

          docker exec mongo-rs mongosh --eval 'rs.initiate({_id: "rs0", members: [{ _id: 0, host: "localhost:27017" }]})'

          sleep 5

      - name: Seed test admin user into collection
        run: |
          node -e "
            const { MongoClient } = require("mongodb");
            (async () => {
              const client = new MongoClient("mongodb://localhost:27017");
              await client.connect();
              const db = client.db("employee_management");
              const employees = db.collection("employees");

              const exists = await employees.findOne({ username: process.env.TEST_ADMIN_USERNAME });
              if (!exists) {
                await employees.insertOne({
                  username: process.env.TEST_ADMIN_USERNAME,
                  password: process.env.TEST_ADMIN_PASSWORD,
                  role: "admin",
                  fullName: "Admin Test",
                  cpf: "00000000000",
                  createdAt: new Date(),
                  updatedAt: new Date(),
                });
              }

              await client.close();
            })();
          "

      - name: Run E2E tests
        run: yarn test:e2e

      - name: Cleanup MongoDB container
        if: always()
        run: |
          docker stop mongo-rs || true
          docker rm mongo-rs || true
